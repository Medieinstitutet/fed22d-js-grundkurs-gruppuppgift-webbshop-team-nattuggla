/* 
 x Formul칛ret d칛r k칬paren fyller i sina uppgifter skall ha: F칬rnamn, Efternamn, Adress, Postnummer, Postort, ev portkod, Telefon (mobil), E-postadress.
 x Samtliga formul칛rf칛lt ska valideras och formul칛ret/best칛llningen ska inte g친 att skicka om det finns n친gra fel
 x N칛r formul칛ret 칛r korrekt ifyllt ska Skicka-/Best칛ll-knappen aktiveras, innan det 칛r den utgr친ad 
 x Checkbox f칬r best칛llning av nyhetsbrev (ska vara iklickad som default)
 x Checkbox f칬r godk칛nnande av behandling av personuppgifter

 ***** (beh칬ver connecta funktionen till best칛llda produkter osv ocks친, just nu endast connectad till formul칛r) *****
 x Det ska finnas en "Rensa best칛llning"-knapp som 친terst칛ller samtliga formul칛rf칛lt liksom eventuella best칛llda munkar/produkter (allts친 antalet 친terst칛lls till 0)

 - Val f칬r betals칛tt: kort eller faktura
 - Om kort v칛ljs som betals칛tt, visas f칛lt f칬r kortnummer, datum/친r och CVC. Dessa beh칬ver inte valideras!
 - Om faktura valts som betals칛tt ska ett formul칛rf칛lt f칬r svenskt personnummer visas. 츿ven detta f칛lt ska valideras innan formul칛ret g친r att skicka iv칛g, dvs. att man fyllt i korrekt personnummer.
 - Felen ska markeras och kommuniceras tydligt (t.ex. ej enbart med r칬d f칛rg, tag i beaktande a11y)
 - Det ska finnas ett f칛lt f칬r att mata in en rabattkod.
 
 PSEUDOKOD
 - OM formul칛ret 칛r korrekt (true) s친 ska skicka/best칛ll knappen aktiveras (enable), ANNARS (disabled).
 - OM kort v칛ljs som betals칛tt, visa f칛lt f칬r kortnummer, datum/친r och CVC.
 - OM faktura v칛ljs som betals칛tt, visa ett formul칛rf칛lt f칬r svenskt personnummer
 och OM svenskt personnummer ha skrivits r칛tt, markera att det 칛r godk칛nt. ANNARS markera att det 칛r r칬tt.

 */

let infoObject = [];

var btnSubmit = document.getElementById("submit");

const fornamn = document.getElementById("fnamn");
const efternamn = document.getElementById("enamn");
const adress = document.getElementById("adress");
const postnum = document.getElementById("pnummer");
const postort = document.getElementById("port");
const portkod = document.getElementById("pkod");
const nummer = document.getElementById("telefon");
const email = document.getElementById("email");
const invoice = document.getElementById(".payment");

btnSubmit.addEventListener("click", function () {
  
  infoObject.push({
    fornamn: fornamn.value,
    efternamn: efternamn.value,
    adress: adress.value,
    postnum: postnum.value,
    postort: postort.value,
    portkod: portkod.value,
    nummer: nummer.value,
    email: email.value,
  });
  alert(
    "Tack f칬r din best칛llning " +
      fornamn.value +
      "!" +
      " Din best칛llning p친 adress: " +
      adress.value +
      ", " +
      postnum.value +
      " " +
      postort.value +
      " kommer att levereras inom 3-5 arbetsdagar. Ett bekr칛ftelsemail ha skickats till " +
      email.value +
      "."
  );
});

// funktion f칬r verifiering f칬r personnummer vid faktura
function verifyPersonNumber(inputtxt) {
  let numbers = /^(19|20)?[0-9]{6}[-]?[0-9]{4}$/;
  if (inputtxt.value.match(numbers)) {
    alert("Godk칛nt");
    return true;

  } else {
    alert("Skriv format: 칀칀칀칀MMDDXXXX / 칀칀MMDDXXXX");
    return false;
  }
}


// funktion f칬r betalningss칛tt
const paymentBox = document.querySelector(".radio-content");
document.querySelectorAll('input[type="radio"]').forEach((element) => {
  element.addEventListener("click", showPaymentInput);
});


function showPaymentInput(e) {
  const value = e.target.value;
  const cardContent = ` <input type="number" placeholder="Kortnummer">
                         <input type="text" placeholder="칀칀/MM">
                         <input type="number" placeholder="CVC">`;

  const invoiceContent =
    `<form>` +
    `            
                        <label for="verifyPb"> Personnummer: </label> ` +
    ` <input  type="number"
                                name="verifyPb"
                                id="verifyPb"
                                placeholder="칀칀칀칀MMDDXXXX">` +
    ` <button type="submit" name="verifysub" id="verifysub" onclick="verifyPersonNumber(verifyPb)"> Skicka </button> `;
  +`</form>`;

  paymentBox.innerHTML = "";
  if (value == "card") {
    paymentBox.innerHTML = cardContent;
  } else {
    paymentBox.innerHTML = invoiceContent;
  }
}

// funktion f칬r disable/enable knappen
function validInput() {}

function checkInput(formList) {
  curr = document.getElementById(formList).value;
  if (curr.length > 0) {
    validInput(formList, 1);
    return true;
  } else {
    validInput(formList, 0);
    return false;
  }
}
window.onload = function () {
  var btnSubmit = document.getElementById("submit");
  
  // l친t knappen vara disabled vid onload
  btnSubmit.setAttribute("disabled", "disabled");

  // l칛gg till keyup event f칬r varje input
  [].slice
    .call(document.querySelectorAll('form input:not([type="submit"])'))
    .forEach(function (element) {
      element.addEventListener(
        "keyup",
        function () {
          // r칛kna antal invalid inputs
          var invalidFields = [].slice
            .call(document.querySelectorAll('form input:not([type="submit"])'))
            .filter(function (element) {
              return !checkInput(element.id);
            });
          if (invalidFields.length == 0) {
            // g칬r knappen enable n칛r invalid inputs 칛r 0
            btnSubmit.removeAttribute("disabled");
          } else if (invalidFields.length == 1) {
            // om enda elementet i invalidFields 칛r portkod, inte supersnygg kod kanske, men funkar nu 游뗿
            if (invalidFields[0] == portkod) {
              btnSubmit.removeAttribute("disabled");

            }
          } else {
            // disable knappen om det 칛r invalid inputs
            btnSubmit.setAttribute("disabled", "disabled");

          }
        },
        false
      );
      
    });
};


// funktion f칬r att reseta formul칛ret
function resetInput() {
  document.getElementById("formList").reset();
}