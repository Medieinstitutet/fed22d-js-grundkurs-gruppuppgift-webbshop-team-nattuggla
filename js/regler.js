              /******** PSEUDOKOD ********/

/* Om kunden inte har lagt best칛llningen inom 15 minuter s친 ska best칛llningsformul칛ret 
t칬mmas/rensas och kunden ska meddelas att denne 칛r f칬r l친ngsam.     <-- n칛r  triggas detta? */

// om best칛llningsobjektets totalpris blir st칬rre 칛n 800, inaktivera val f칬r faktura  <-- n칛r  triggas detta?

// <best칛llningsknapp> klickas -->
// funktion f칬r att hindra att best칛llningen 칛ndras, hur g칬r vi? n칛r? 
// spara dag f칬r best칛llning i variabel   驕놾잺
// spara tidpunkt f칬r best칛llning i variabel  驕놾잺
// h칛mta totalpris, spara i variabel  驕놾잺



// ska rabatter g친 att kombinera? 游뱂

// kontrollera ifall antal av en chokladsort 칛r best칛lld mer 칛n 10 st ->
//    b칬r g칬ras innan nedan rabatter p친 totalsumma isf, vart och n칛r?

// Kontrollera ifall det 칛r en rabattv칛rdig dag, OM sant:   驕놾잺
//    OM det 칛r m친ndag OCH timvariabeln 칛r mindre 칛n 10:    驕놾잺
//        returnera totalpris * 0.1 till slutgiltigt pris   驕놾잺

//    OM det 칛r tisdag:
//        OM j칛mn vecka && best칛llningen 칬ver 25kr:
//            subtrahera 25 kr fr totalpris

// OM det 칛r 13e december:
//    l칛gg till en gratis pepparkakschoklad eller n친t 游꼵游땎

// OM det 칛r 24 december
//    g칬r pristexter r칬da
//    byt bakgrundsbild

// rabattkod, n친t med RegEx? kmr vecka 3 har jag f칬r mig

// massa matte p친 leveranser

              /******** VARIABLER ********/


// const originalPrice = best칛llningsobjektet.totalPrice

const timeOfOrder = new Date();                     //  b칬r va typ event p친 best칛llningsknapp som k칬r typ placeOrder(), skapa ett Date-objekt
const displayDate = timeOfOrder.toDateString();     //  f칬r utskrift av datum och tid f칬r best칛llning
let deliveryTime;                                   //  massa matte p친 timeOfOrder sen
const orderDay = timeOfOrder.getDay();              //  spara dagen f칬r best칛llning som number mellan 0 och 6 (0 = s칬ndag)
const orderHour = timeOfOrder.getHours();           //  spara klockslag f칬r best칛llning, number mellan 0 och 23
const initalPrice = customerOrder.totalPrice;        //  h칛mta totalpriset fr친n kundkorgp, innan rabatter/p친slag

              /********  FUNKTIONER ********/

/**
 * kollar om dagen 칛r rabattber칛ttigad
 * @param {number} weekDay - dagen som best칛llningen las
 * @returns en bool!
 */
function isDiscountDay(weekDay) {       
  if (weekDay == 1 || weekDay == 5 || weekDay == 6) {
    return true;
  }
  else { 
    return false;
  }
}

/**
 * 칛ndrar best칛llnngsobjektets totalpris
 * @param {number} price priset fr친n initialPrice
 */
function applyMondayDiscount(price) {      // en bool variabel i best칛llningsobjektet som heter hasMondayDiscount och false?                             
  hasMondayDiscount = true;           // s친 kan det skrivas ut ett meddelande beroende p친 true eller false typ..
  let discountedPrice = price *= 0.1;
  customerOrder.totalPrice = discountedPrice;
}

function checkWeek() {
  // kontrollera om j칛mn vecka, n친n modulo-check p친 vecko-nr?
}

function applyWeekendIncrease() {
  // sneaky prish칬jning
}


              /******** PROGRAMFL칐DE ********/ 


// startas av typ placeOrder() n칛r man klickar p친 l칛gg best칛llning ?

isDiscountDay(orderDay);        // kontrollera om dagens dag ger r칛tt till rabatt eller inte

if (isDiscountDay) {            // om den g칬r det, kolla vilken dag, och vilken tid
  switch (orderDay) {           // sv친rt att kontrollera om detta funkar som det ska, kan ju bara g칬ras p친 r칛tt dag och tid 游뱂
    
    case 1:   // OM m친ndag:
      if (orderHour < 10 && orderHour > 3) {
        applyMondayDiscount(initalPrice);
      }
      else if(orderHour > 0 && orderHour <= 3) {
        applyWeekendIncrease(initalPrice);
      }

    break;

    case 2:   // OM tisdag
      checkWeek();
    break;

    case 5:   // OM fredag:
      if (orderHour > 14) {
        applyWeekendIncrease(initalPrice);
      }

    break;

    case 6:   // OM l칬rdag eller s칬ndag:
    case 0:   
      applyWeekendIncrease(initalPrice);
    break;

  }
}


